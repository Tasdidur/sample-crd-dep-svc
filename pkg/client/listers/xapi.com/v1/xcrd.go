/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/Tasdidur/xcrd/pkg/apis/xapi.com/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// XcrdLister helps list Xcrds.
// All objects returned here must be treated as read-only.
type XcrdLister interface {
	// List lists all Xcrds in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.Xcrd, err error)
	// Xcrds returns an object that can list and get Xcrds.
	Xcrds(namespace string) XcrdNamespaceLister
	XcrdListerExpansion
}

// xcrdLister implements the XcrdLister interface.
type xcrdLister struct {
	indexer cache.Indexer
}

// NewXcrdLister returns a new XcrdLister.
func NewXcrdLister(indexer cache.Indexer) XcrdLister {
	return &xcrdLister{indexer: indexer}
}

// List lists all Xcrds in the indexer.
func (s *xcrdLister) List(selector labels.Selector) (ret []*v1.Xcrd, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.Xcrd))
	})
	return ret, err
}

// Xcrds returns an object that can list and get Xcrds.
func (s *xcrdLister) Xcrds(namespace string) XcrdNamespaceLister {
	return xcrdNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// XcrdNamespaceLister helps list and get Xcrds.
// All objects returned here must be treated as read-only.
type XcrdNamespaceLister interface {
	// List lists all Xcrds in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.Xcrd, err error)
	// Get retrieves the Xcrd from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1.Xcrd, error)
	XcrdNamespaceListerExpansion
}

// xcrdNamespaceLister implements the XcrdNamespaceLister
// interface.
type xcrdNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Xcrds in the indexer for a given namespace.
func (s xcrdNamespaceLister) List(selector labels.Selector) (ret []*v1.Xcrd, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.Xcrd))
	})
	return ret, err
}

// Get retrieves the Xcrd from the indexer for a given namespace and name.
func (s xcrdNamespaceLister) Get(name string) (*v1.Xcrd, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("xcrd"), name)
	}
	return obj.(*v1.Xcrd), nil
}
